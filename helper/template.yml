AWSTemplateFormatVersion: 2010-09-09
Description: >
    Template for helper resources based on Lambda-backend custom resources.

Parameters:
  ResourceNamePrefix:
    Description: Prefix of resource name.
    Type: String
    Default: cfn-helper
  LogRetentionDays:
    Description: Retention in days of CloudWatch Logs.
    Type: Number
    Default: 3

Resources:
  # ------------------------------------------------------------#
  #  Lambda
  # ------------------------------------------------------------#
  MapFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            try:
              input = event['ResourceProperties']['Input']
              value = event['ResourceProperties']['Value']
              param = event['ResourceProperties'].get('ParameterString', '?')
              if type(input) is not list or type(param) is not str:
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
                return
              output = [replace(value, v, param) for v in input]
              response_data = {}
              response_data['Output'] = output
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
            except Exception as e:
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})

          def replace(value, replacement, param):
            if type(value) is str and value == param:
              return replacement
            if type(value) is list:
              return replaceList(value, replacement, param)
            if type(value) is dict:
              return replaceDict(value, replacement, param)
            return value

          def replaceList(value, replacement, param):
            return [replace(v, replacement, param) for v in value]

          def replaceDict(value, replacement, param):
            return dict([(k, replace(v, replacement, param)) for k, v in value.items()])

      FunctionName: !Sub ${ResourceNamePrefix}-cfn-map-function
      Description: Map function for CloudFormatiomn.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionRole.Arn
      Runtime: python3.6
      Timeout: 5

  LenFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            try:
              input = event['ResourceProperties']['Input']
              output = len(input)
              response_data = {}
              response_data['Output'] = output
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
            except Exception as e:
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      FunctionName: !Sub ${ResourceNamePrefix}-cfn-len-function
      Description: Length function for CloudFormatiomn
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionRole.Arn
      Runtime: python3.6
      Timeout: 10

  Route53HostedZoneFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import re
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          client = boto3.client('route53')

          def handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
              domain = event['ResourceProperties']['DomainName']
              zones = collect(domain)
              if zones:
                zone = max(zones, key=lambda x: len(x['Name']))
                response_data = {
                  'Id': zone['Id'].replace('/hostedzone/', ''),
                  'Name': zone['Name']
                }
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              else:
                logger.error('HostedZone not found.')
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            except Exception as e:
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})

          def collect(domain, marker=None):
            if marker:
              response = client.list_hosted_zones(
                Marker=marker,
                MaxItems='100'
              )
            else:
              response = client.list_hosted_zones(
                MaxItems='100'
              )
            zones = [zone for zone in response['HostedZones'] if match(domain, zone['Name'])]
            next_marker = response.get('NextMarker')
            if next_marker:
              return zones + collect(domain, next_marker)
            return zones

          def match(domain, dns_name):
            domain_pattern = '^(.+\.)*' + dns_name.rstrip('.') + '$'
            if re.match(domain_pattern, domain):
              return True
            return False

      FunctionName: !Sub ${ResourceNamePrefix}-cfn-route53-hostedzone
      Description: A function to get Route53 HostedZone ID from domain name for CloudFormatiomn.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt Route53HostedZoneFunctionRole.Arn
      Runtime: python3.6
      Timeout: 15

  AcmCertificateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import re
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          DEFAULT_REGION = os.environ.get('DEFAULT_REGION', 'ap-northeast-1')

          def handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
              domain = event['ResourceProperties']['DomainName']
              region = event['ResourceProperties'].get('Region', DEFAULT_REGION)
              arn = get_client(region)(domain)
              if arn:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Arn': arn})
              else:
                logger.error('Certificate not found.')
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            except Exception as e:
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})

          def get_client(region):
            client = boto3.client('acm', region_name=region)
            def find(domain, next_token=None):
              if next_token:
                response = client.list_certificates(
                  CertificateStatuses=['ISSUED'],
                  NextToken=next_token,
                  MaxItems=100
                )
              else:
                response = client.list_certificates(
                  CertificateStatuses=['ISSUED'],
                  MaxItems=100
                )
              for cert in response['CertificateSummaryList']:
                if match(domain, cert['DomainName']):
                  return cert['CertificateArn']
              next_token = response.get('NextToken')
              if next_token:
                return find(domain, next_token)
              return None
            return find

          def match(domain, cert_domain):
            domain_pattern = '^' + cert_domain.replace('*', '.+') + '$'
            if re.match(domain_pattern, domain):
              return True
            return False

      FunctionName: !Sub ${ResourceNamePrefix}-cfn-acm-certificate
      Description: A function to get ACM certificate ARN from domain name for CloudFormatiomn.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt AcmCertificateFunctionRole.Arn
      Runtime: python3.6
      Timeout: 15
      Environment:
        Variables:
          DEFAULT_REGION: !Ref AWS::Region

  ElastiCacheNodeGroupConfigurationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
              zones = event['ResourceProperties']['AvailabilityZones']
              num_groups = int(event['ResourceProperties']['NumNodeGroups'])
              num_replicas = int(event['ResourceProperties'].get('ReplicasPerNodeGroup', len(zones) - 1))
              value = [make_config(n, num_replicas, zones) for n in range(num_groups)]
              response_data = {'Value': value}
              logger.info(response_data)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
            except Exception as e:
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})

          def make_config(group_no, num_replicas, zones):
            num_zones = len(zones)
            num_replica_zones = min(num_zones, num_replicas)
            zone_no = group_no % num_zones
            replica_zones = [zones[(zone_no + n + 1) % num_zones] for n in range(num_replica_zones)]
            return {
              'PrimaryAvailabilityZone': zones[zone_no],
              'ReplicaAvailabilityZones': replica_zones,
              'ReplicaCount': len(replica_zones)
            }

      FunctionName: !Sub ${ResourceNamePrefix}-cfn-cache-nodegroupconfig
      Description: A function to create a NodeGroupConfiguration parameter of ElastiCache ReplicationGroup resources for CloudFormatiomn.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionRole.Arn
      Runtime: python3.6
      Timeout: 5

  # ------------------------------------------------------------#
  #  CloudWatch Logs
  # ------------------------------------------------------------#
  MapFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${MapFunction}
      RetentionInDays: !Ref LogRetentionDays

  LenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LenFunction}
      RetentionInDays: !Ref LogRetentionDays

  Route53HostedZoneFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Route53HostedZoneFunction}
      RetentionInDays: !Ref LogRetentionDays

  AcmCertificateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AcmCertificateFunction}
      RetentionInDays: !Ref LogRetentionDays

  ElastiCacheNodeGroupConfigurationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ElastiCacheNodeGroupConfigurationFunction}
      RetentionInDays: !Ref LogRetentionDays

  # ------------------------------------------------------------#
  #  Role
  # ------------------------------------------------------------#
  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceNamePrefix}-cfn-lambda-basic-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Route53HostedZoneFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceNamePrefix}-cfn-route53-hostedzone-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: acm-read-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - route53:GetHostedZone
                  - route53:GetHostedZoneCount
                  - route53:ListHostedZones
                  - route53:ListHostedZonesByName
                Resource: '*'

  AcmCertificateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceNamePrefix}-cfn-acm-certificate-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: acm-read-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - acm:DescribeCertificate
                  - acm:ListCertificates
                  - acm:GetCertificate
                  - acm:ListTagsForCertificate
                Resource: '*'

Outputs:
  MapFunctionServiceToken:
    Description: Service token of the map function custom resource.
    Value: !GetAtt MapFunction.Arn
    Export:
      Name: !Sub ${ResourceNamePrefix}-MapFunctionServiceToken
  LenFunctionServiceToken:
    Description: Service token of the length function custom resource.
    Value: !GetAtt LenFunction.Arn
    Export:
      Name: !Sub ${ResourceNamePrefix}-LenFunctionServiceToken
  Route53HostedZoneServiceToken:
    Description: Service token to get a Route53 HostedZone custom resource.
    Value: !GetAtt Route53HostedZoneFunction.Arn
    Export:
      Name: !Sub ${ResourceNamePrefix}-Route53HostedZoneServiceToken
  AcmCertificateServiceToken:
    Description: Service token to get an ACM certificate custom resource.
    Value: !GetAtt AcmCertificateFunction.Arn
    Export:
      Name: !Sub ${ResourceNamePrefix}-AcmCertificateServiceToken
  ElastiCacheNodeGroupConfigurationServiceToken:
    Description: Service token of the ElastiCache NodeGroupConfiguration custom resource.
    Value: !GetAtt ElastiCacheNodeGroupConfigurationFunction.Arn
    Export:
      Name: !Sub ${ResourceNamePrefix}-ElastiCacheNodeGroupConfigurationServiceToken
